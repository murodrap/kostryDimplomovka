#include <cstring>
#include <stdio.h>
#include <iostream>
#include <chrono>
#include <vector>




using Edges = std::vector<std::vector<int>>;
int reg = 3;


Edges getEdgesBinary(const char* graph, int n, int sizeOfGraph) {
    Edges edges(n*reg/2);
    int index = 0;
    int vertex = 0;
    //std::cout << " qqqqqqqqqqqqqq " << (graph == NULL) << " " << strlen(graph) << " " << (int)graph[0] << "--" << (int)graph[1] << std::endl;
    //std::cout << n << " " << sizeOfGraph << std::endl;
    //std::cout << sizeof(graph) << std::endl;


    for (size_t i = 0; i < sizeOfGraph; i++) {
        //std::cout << "++" << i << std::endl;
            int neighbour = (int) graph[i];
            std::cout << neighbour << " ";
            if (!neighbour) {
                vertex++;
                continue;
            }

            std::vector<int> edge(2);
            edge[0] = vertex;
            edge[1] = neighbour - 1;
            edges[index] = edge;
            index++;
    }
    std::cout << std::endl;
    return edges;
}

void printGraph(const char* graph, int n, int sizeOfGraph) {
    std::cout << n << ":" << std::endl;
    Edges edges = getEdgesBinary(graph, n, sizeOfGraph);
    std::cout << "[";
    for (auto edge : edges) {
        std::cout << "(" << edge[0] << ", " << edge[1] << "), ";
    }
    std::cout << "]" << std::endl;

}

/**
 * reads and processes all graphs generated by snarkhunter from std in
 */
void processAllBinary() {
    //std::ifstream inputGraphs(, std::ios::in | std::ios::binary);
    
    
    char nBin;

    while (std::cin.good()) {
        std::cin.read(&nBin, sizeof(char));
        int n = (int) nBin;
        if (n == 0) {
            break;
        }
        int sizeOfGraph = n + (n * reg) / 2 - 2;
        //std::cout << "vertices: " << n << " size: " << sizeOfGraph << std::endl;

        char * graph = new char [sizeOfGraph];
        //std::cout << " acacaca " << (graph == NULL) << " " << strlen(graph) << std::endl;

        std::cin.read(graph, sizeOfGraph);
        //std::cout << " nbbbbk " << (graph == NULL) << " " << strlen(graph) << std::endl;
        printGraph(graph, n, sizeOfGraph);
        delete [] graph;
        if (std::cin.good()) {
            std::cin.read(&nBin, sizeof(char));
        }
    }
    
}

int main(int argc, char *argv[])
{
    processAllBinary();
}